name: "Gerber Image"
scopeName: "source.gerber"
fileTypes: ["gbr", "gtl", "gbl", "gbs", "gto", "gts", "gtp", "gbo", "gbp"]
patterns: [{
	# Comment
	contentName: "comment.block.gerber"
	begin: "G04"
	end: "(?=\\*)"
	beginCaptures:
		0: name: "entity.name.function.begin-comment.gerber"
},{
	# Extended command block
	name: "meta.command.block.gerber"
	begin: "%"
	end:   "%"
	beginCaptures: 0: name: "punctuation.section.begin.extended.command.gerber"
	endCaptures:   0: name: "punctuation.section.end.extended.command.gerber"
	patterns: [include: "#extendedCommands"]
},{
	# Parameter separator
	name: "punctuation.separator.list.comma.gerber"
	match: ","
},{
	# Command terminator
	name: "keyword.operator.terminator.gerber"
	match: "\\*"
},{
	# EOF marker
	name: "keyword.control.eof.gerber"
	match: "M02"
},{
	# Function codes
	name: "entity.name.function.${1:/downcase}.command.gerber"
	match: """(?x)
		(FS|MO|AD|AM|AB|D[0-9]+|G01|G02|G03|G74|G75|LP|LM|LR|LS|G36|G37
		|SR|G04|TF|TA|TO|TD|M02|G54|G55|G70|G71|G90|G91|M00|M01|IP|AS
		|IR|MI|OF|SF|IN|LN)
	"""
},{
	# X/Y ordinate
	name: "meta.${1:/downcase}.ordinate.gerber"
	match: "(X|Y)([-+]?[0-9]+)"
	captures:
		1: name: "storage.name.var.${1:/downcase}.gerber"
		2: name: "constant.numeric.decimal.gerber"
},{
	# Decimal value
	name: "constant.numeric.decimal.gerber"
	match: "[-+]?(?:[0-9]*\\.[0-9]+|[0-9]+)"
}]


repository:
	
	extendedCommands:
		patterns: [{
			# Aperture macro
			begin: "\\G(AM)([A-Za-z_.0-9$]+)"
			end: "(?=%)"
			beginCaptures:
				1: name: "storage.type.function.macro.gerber"
				2: name: "entity.name.function.macro.gerber"
			patterns: [include: "#macroInnards"]
		},{
			# Aperture definition
			name: "meta.aperture.definition.gerber"
			begin: "\\G(AD)(D[0-9]+)([^,%*\\s]+)"
			end:   "(?=%)"
			beginCaptures:
				1: name: "storage.type.function.aperture.gerber"
				2: name: "entity.name.function.d-code.gerber"
				3: name: "variable.parameter.aperture-name.gerber"
			patterns: [{
				begin: "\\G(?=,)"
				end:   "(?=%)"
				patterns: [{
					match: "(X)?([^*%X]+)"
					captures:
						1: name: "punctuation.delimiter.modifiers.list.gerber"
						2: patterns: [include: "$self"]
				}, include: "$self"]
			}, include: "$self"]
		},{
			# Attribute definitions
			name: "meta.attribute.gerber"
			begin: "\\G(TF|TA|TO)([^,*%]+)(,)"
			end:   "(?=\\*|%)"
			beginCaptures:
				1: name: "storage.type.attribute.gerber"
				2: name: "entity.other.attribute-name.gerber"
			patterns: [
				{match: ",",      name: "punctuation.separator.list.comma.gerber"}
				{match: "[^,%*]", name: "string.unquoted.attribute.gerber"}
			]
		},{
			# Delete attribute
			match: "\\G(TD)([^,*%]+)"
			captures:
				1: name: "entity.name.function.delete.attribute.gerber"
				2: name: "entity.other.attribute-name.gerber"
		},{
			# Format string
			match: "\\G(FS)([LT][AI])"
			captures:
				1: name: "entity.name.function.format-spec.gerber"
				2: name: "constant.language.option.modes.gerber"
		},{
			# Offset
			match: "\\G(OF)(A)([-+]?[0-9]+)(B)([-+]?[0-9]+)"
			captures:
				1: name: "entity.name.function.offset.gerber"
				2: name: "storage.name.var.offset.a-axis.gerber"
				3: name: "constant.numeric.decimal.gerber"
				4: name: "storage.name.var.offset.b-axis.gerber"
				5: name: "constant.numeric.decimal.gerber"
		},{
			# Mode selection
			match: "\\G(MO)(IN|MM)"
			captures:
				1: name: "entity.name.function.unit-mode.gerber"
				2: name: "constant.language.unit-type.gerber"
		},{
			# IP: Image polarity
			match: "\\G(IP)(POS|NEG)"
			captures:
				1: name: "entity.name.function.image-polarity.gerber"
				2: name: "constant.language.image-polarity.gerber"
		},{
			# LP: Load polarity
			match: "\\G(LP)(C|D)"
			captures:
				1: name: "entity.name.function.load-polarity.gerber"
				2: name: "constant.language.polarity-type.gerber"
		},{
			# LM: Load mirroring
			match: "\\G(LM)(N|XY|X|Y)"
			captures:
				1: name: "entity.name.function.load-mirroring.gerber"
				2: name: "constant.language.mirror-type.gerber"
		},{
			# LN: Load name
			begin: "\\G(LN)"
			end:   "(?=\\*|%)"
			beginCaptures:
				1: name: "entity.name.function.load-name.gerber"
			contentName: "variable.parameter.gerber"
		}, include: "$self"]


	macroInnards:
		patterns: [{
			# Comment line starting with `0 `
			name: "comment.line.primitive.gerber"
			match: "^\\s*(0)(\\s+([^*%]+)(?=\\*|%|$))"
			captures:
				1: name: "keyword.operator.primitive.gerber"
				3: name: "string.unquoted.gerber"
				2: patterns: [include: "#unicodeEscape"]
		},{
			# Arithmetic: Operators
			name: "keyword.operator.logical.arithmetic.gerber"
			match: "\\+|-|x|X|/"
		},{
			# Arithmetic: Brackets
			match: "(\\()|(\\))"
			captures:
				1: name: "punctuation.section.equation.begin.gerber"
				2: name: "punctuation.section.equation.end.gerber"
		},{
			# Variable name
			name: "variable.positional.parameter.gerber"
			match: "(\\$)[1-9][0-9]*"
			captures:
				1: name: "punctuation.definition.variable.gerber"
		},{
			# Variable assignment
			name: "keyword.operator.assignment.gerber"
			match: "="
		}, include: "$self"]

	
	unicodeEscape:
		name: "constant.character.escape.unicode.gerber"
		match: "(\\\\)u[0-9A-Fa-f]{4}"
		captures:
			1: name: "punctuation.definition.escape.backslash.gerber"
