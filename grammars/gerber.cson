name: "Gerber Image"
scopeName: "source.gerber"
fileTypes: ["gbr", "gtl", "gbl", "gbs", "gto", "gts", "gtp", "gbo", "gbp", "drl"]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#extendedCmd"}
			{include: "#dataBlock"}
			{include: "#terminator"}
			{include: "#invalidBytes"}
		]


	comment:
		contentName: "comment.block.gerber"
		begin: "^\\s*(G04)"
		end:   "(?=\\*)"
		beginCaptures:
			1: name: "entity.name.function.comment.command.gerber"

	
	extendedCmd:
		name: "meta.extended.command.gerber"
		begin: "%"
		end:   "(\\*)(%)"
		beginCaptures:
			0: name: "punctuation.section.begin.percentage.gerber"
		endCaptures:
			1: name: "keyword.operator.terminator.gerber"
			2: name: "punctuation.section.end.percentage.gerber"
		patterns: [{
			
			# `AM` command, which supports multiple data-blocks
			name: "meta.multi.data.block.gerber"
			begin: "(?:\\G|^)(AM)([A-Za-z_.0-9$]+)\\s*(\\*)"
			end:   "(?=\\*%)"
			beginCaptures:
				1: name: "storage.type.function.aperture.command.gerber"
				2: name: "entity.name.function.aperture.gerber"
				3: name: "keyword.operator.terminator.gerber"
			patterns: [{
				# Comment line starting with `0 `
				name: "comment.line.primitive.gerber"
				match: "^\\s*(0)\\s+([^*%]+)(?=\\*|$)"
				captures:
					1: name: "keyword.operator.primitive.gerber"
					2: patterns: [include: "#string"]
			},{
				name: "punctuation.separator.list.comma.gerber"
				match: ","
			}, include: "#scalars"]
		},{
			# `FS` command: Format specification for coordinate data
			name: "meta.format-spec.data.block.gerber"
			match: """(?x) (?:\\G|^)
				(FS) (?:
					(L | (T)) # Deprecated: Zero-omission setting
					(A | (I)) # Deprecated: Absolute/Incremental notation
				)?
				# Format specification
				(X) ([0-6][4-6]|([0-9]+))
				(Y) ((?=\\7)[0-6]{2}|((?!\\7)[0-9]+))
				(?= \\*%)
			"""
			captures:
				1: name: "entity.name.function.unit.command.gerber"
				2: name: "constant.language.zero-omisson.option.gerber"
				3: name: "invalid.deprecated.option.gerber"
				4: name: "constant.language.unit-notation.option.gerber"
				5: name: "invalid.deprecated.option.gerber"
				6: name: "storage.name.var.x.gerber"
				7: name: "constant.numeric.integer.gerber"
				8: name: "invalid.illegal.range.gerber"
				9: name: "storage.name.var.y.gerber"
				10: name: "constant.numeric.integer.gerber"
				11: name: "invalid.illegal.range.gerber"
		},{
			# `MO`: "Mode" (Unit of Measurement)
			match: "(?:\\G|^)(MO)(IN|MM)(?=\\*%)"
			captures:
				1: name: "entity.name.function.unit.command.gerber"
				2: name: "support.constant.language.unit.gerber"
		},{
			# `AD`: Aperture definition
			name: "meta.aperture.definition.gerber"
			begin: "(?:\\G|^)(AD)(D[1-9][0-9]+)"
			end:   "(?=\\*%)"
			beginCaptures:
				1: name: "entity.name.function.aperture.command.gerber"
				2: name: "variable.parameter.d-code.gerber"
			patterns: [{
				match: "\\G([A-Za-z_.0-9$]+)(,)?"
				captures:
					1: patterns: [include: "#name"]
					2: name: "punctuation.separator.list.comma.gerber"
			},{
				match: "(X)?([^*%X]+)"
				captures:
					1: name: "punctuation.delimiter.modifiers.list.gerber"
					2: patterns: [include: "#dataTypes"]
			}]
		},{
			# Extended code commands. The spec states newlines can be inserted
			# anywhere for readability, which implies that `^%\n\nFS` is legal
			# syntax. Rather than add a begin/end pair for each command code,
			# we're simply duplicating the opening command rule in the hopes the
			# following lines are done justice by the default fallback rules.
			name: "meta.data.block.gerber"
			begin: """(?x) (?:\\G|^) (?:
				(FS|MO)     | # Unit/resolution commands
				(AD|AM)     | # Aperture commands
				(SR)        | # Step-and-repeat
				(LP)        | # Level polarity
				(TF|TA|TD)    # Attribute commands
			)"""
			end: "(?=\\*)"
			captures:
				1: name: "entity.name.function.unit.command.gerber"
				2: name: "entity.name.function.aperture.command.gerber"
				3: name: "entity.name.function.repeat.command.gerber"
				4: name: "entity.name.function.level.polarity.command.gerber"
				5: name: "entity.name.function.attribute.command.gerber"
		
		}, include: "#dataBlock"]
	
	
	
	# Function code followed by a *-terminated data-block
	dataBlock:
		name: "meta.data.block.gerber"
		begin: """(?x) (?:
			(D0[1-3])   | # D-codes
			(Dnn)       | # Select aperture
			(G0[1-3])   | # Interpolation mode
			(G36|G37)   | # Region mode
			(G74|G75)   | # Quadrant mode
			(M02)         # EOF
		)"""
		end: "\\*"
		beginCaptures:
			1: name: "entity.name.function.d-code.command.gerber"
			2: name: "entity.name.function.select.aperture.command.gerber"
			3: name: "entity.name.function.mode.interpolation.command.gerber"
			4: name: "entity.name.function.mode.region.command.gerber"
			5: name: "entity.name.function.mode.quadrant.command.gerber"
			6: name: "keyword.control.eof.gerber"
		endCaptures:
			0: name: "keyword.operator.terminator.gerber"
	
	
	
	# End-of-file indicator
	EOF:
		begin: "M02"
		end:   "\\*"
		beginCaptures:
			0: name: "keyword.control.eof.gerber"
		endCaptures:
			0: name: "keyword.operator.terminator.gerber"
	
	
	dataTypes:
		patterns: [
			{include: "#scalars"}
			{include: "#name"}
			{include: "#invalidBytes"}
		]
	
	
	# Basic data-types only
	scalars:
		patterns: [
			{include: "#decimal"}
			{include: "#integer"}
			{include: "#coord"}
			{include: "#hex"}
		]
	
	# 32-bit signed integer
	integer:
		name: "constant.numeric.integer.gerber"
		match: "[-+]?[0-9]+"
	
	
	# Floating-point
	decimal:
		name: "constant.numeric.float.decimal.gerber"
		match: "[-+]?[0-9]+(?:\\.[0-9]+)?"

	
	# Coordinate data
	coord:
		name: "meta.coordinate.data.gerber"
		match: "((X)([-+]?[0-9]+))((Y)([-+]?[0-9]+))"
		captures:
			1: name: "meta.x.ordinate.gerber"
			2: name: "storage.name.var.x.gerber"
			3: name: "constant.numeric.integer.gerber"
			1: name: "meta.y.ordinate.gerber"
			2: name: "storage.name.var.y.gerber"
			3: name: "constant.numeric.integer.gerber"
	
	# Hexadecimal sequence
	hex:
		name: "constant.numeric.integer.hex.gerber"
		match: "[A-Fa-f0-9]+"


	# Identifier string
	name:
		patterns: [{
			name: "invalid.illegal.value.length.gerber"
			match: "[A-Za-z_.$][A-Za-z_.0-9$]{127,}"
		},{
			name: "variable.reserved.system.name.gerber"
			match: "(\\.)[A-Za-z_.0-9$]{0,126}"
			captures:
				1: name: "punctuation.definition.variable.name.gerber"
		},{
			name: "variable.other.name.gerber"
			match: "[A-Za-z_.$][A-Za-z_.0-9$]{0,126}"
		}]

	
	# String data
	string:
		name: "string.unquoted.gerber"
		match: "[-a-zA-Z0-9_+/!?<>\"'(){}.\\\\|&@# ,;$:=]+"
		captures: 0: patterns: [{
			name: "constant.character.escape.unicode.gerber"
			match: "(\\\\)u[0-9A-Fa-f]{4}"
			captures:
				1: name: "punctuation.definition.escape.backslash.gerber"
		}]


	# Command terminator
	terminator:
		name: "keyword.operator.terminator.gerber"
		match: "\\*"


	# Invalid character
	invalidBytes:
		name: "invalid.illegal.character.gerber"
		match: "(?:(?!\\r|\\n)\\s|[^\\0-\\x7F])+"
